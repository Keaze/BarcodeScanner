name: Release Build and Sign APK

on:
  push:
    tags:
      - 'v*'          # Triggers on version tags like v1.0.0, v2.1.3, etc.
      - 'release-*'   # Triggers on release tags like release-1.0
  workflow_dispatch: # Allows manual triggering from GitHub UI
    inputs:
      tag_name:
        description: 'Tag name for the release'
        required: false
        default: ''
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean

# Ensure the GITHUB_TOKEN has permission to create releases
permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # needed to fetch tags
          submodules: true  # fetch and init submodules
          persist-credentials: true  # use GITHUB_TOKEN for submodules

      - name: Ensure submodules are initialized
        shell: bash
        run: |
          set -euo pipefail
          git submodule sync --recursive
          git submodule update --init --recursive
          git submodule status


      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Decode Keystore
        env:
          ENCODED_STRING: ${{ secrets.KEYSTORE_BASE64 }}
        run: |
          echo $ENCODED_STRING | base64 -di > app/release-keystore.jks

      - name: Get version from tag
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.tag_name }}" ]; then
            echo "VERSION_NAME=${{ github.event.inputs.tag_name }}" >> $GITHUB_OUTPUT
            echo "VERSION_CODE=$(date +%s)" >> $GITHUB_OUTPUT
          else
            # Extract version from git tag (remove 'v' prefix if present)
            VERSION_NAME=${GITHUB_REF#refs/tags/}
            VERSION_NAME=${VERSION_NAME#v}
            echo "VERSION_NAME=${VERSION_NAME}" >> $GITHUB_OUTPUT
          
            # Generate version code from tag (remove dots and pad)
            VERSION_CODE=$(echo ${VERSION_NAME} | sed 's/\.//g' | sed 's/[^0-9]//g')
            if [ ${#VERSION_CODE} -lt 5 ]; then
              VERSION_CODE="${VERSION_CODE}0000"
              VERSION_CODE=${VERSION_CODE:0:5}
            fi
            echo "VERSION_CODE=${VERSION_CODE}" >> $GITHUB_OUTPUT
          fi

      - name: Build Release APK
        env:
          KEYSTORE_FILE: release-keystore.jks
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
          VERSION_NAME: ${{ steps.version.outputs.VERSION_NAME }}
          VERSION_CODE: ${{ steps.version.outputs.VERSION_CODE }}
        run: |
          ./gradlew assembleRelease \
            -Pversion.name=$VERSION_NAME \
            -Pversion.code=$VERSION_CODE

      #      - name: Build Release AAB
      #        env:
      #          KEYSTORE_FILE: release-keystore.jks
      #          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
      #          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
      #          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
      #          VERSION_NAME: ${{ steps.version.outputs.VERSION_NAME }}
      #          VERSION_CODE: ${{ steps.version.outputs.VERSION_CODE }}
      #        run: |
      #          ./gradlew bundleRelease \
      #            -Pversion.name=$VERSION_NAME \
      #            -Pversion.code=$VERSION_CODE

      - name: Rename artifacts
        run: |
          cd app/build/outputs/apk/release/
          mv app-release.apk BarcodeScanner-${{ steps.version.outputs.VERSION_NAME }.apk
      #          cd ../../bundle/release/
      #          mv app-release.aab app-${{ steps.version.outputs.VERSION_NAME }}-release.aab

      - name: Generate checksums
        run: |
          cd app/build/outputs/apk/release/
          sha256sum *.apk > checksum.txt

      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-apk-${{ steps.version.outputs.VERSION_NAME }}
          path: |
            app/build/outputs/apk/release/*.apk
            app/build/outputs/apk/release/checksum.txt
          retention-days: 90

      #      - name: Upload AAB Artifact
      #        uses: actions/upload-artifact@v4
      #        with:
      #          name: release-aab-${{ steps.version.outputs.VERSION_NAME }}
      #          path: |
      #            app/build/outputs/bundle/release/*.aab
      #          retention-days: 90

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.tag_name || github.ref_name }}
          name: Release ${{ steps.version.outputs.VERSION_NAME }}
          draft: false
          prerelease: ${{ github.event.inputs.prerelease == 'true' }}
          generate_release_notes: true
          files: |
            app/build/outputs/apk/release/*.apk
            #            app/build/outputs/bundle/release/*.aab
                   app/build/outputs/apk/release/checksum.txt
          body: |
            ## üöÄ Release ${{ steps.version.outputs.VERSION_NAME }}
            
            ### üì± Downloads
            - **APK**: For direct installation on Android devices
            - **Checksums**: SHA256 hashes for verification
            
            ### üìã Installation
            1. Download the APK file
            2. Enable "Install from unknown sources" on your device
            3. Install the APK
            
            ### üîê Verification
            You can verify the integrity of the files using the provided checksums:
            ```bash
            sha256sum -c checksums.txt
            ```
            
            ---
            *Built with GitHub Actions*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}